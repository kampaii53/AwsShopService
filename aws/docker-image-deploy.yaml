AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a Docker container within a previously created VPC. Requires a running network stack.
Parameters:
  NetworkStackName:
    Type: String
    Description: The name of the networking stack that
      these resources are put into.
  ServiceName:
    Type: String
    Description: A human-readable name for the service.
  ImageUrl:
    Type: String
    Description: The url of a docker image that will handle incoming traffic.
  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number the application inside the docker container
      is binding to.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run.
  LoadBalancerName:
    Type: String
    Default: "AwsShopLoadBalancer"

Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Ref LoadBalancerName
      Listeners:
        - LoadBalancerPort: '8080'
          InstancePort: '8080'
          Protocol: HTTP
      Subnets:
        - Fn::ImportValue:
            !Join [ ':', [ !Ref 'NetworkStackName', 'PublicSubnet' ] ]

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'ServiceName'
      RetentionInDays: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: 512
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'NetworkStackName', 'ECSTaskExecutionRole' ] ]
      TaskRoleArn:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'NetworkStackName', 'ECSTaskExecutionRole' ] ]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: 256
          Memory: 1024
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'ServiceName'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref 'ServiceName'
        - Name: 'xray-daemon-container'
          Cpu: 256
          Memory: 1024
          Image: 'amazon/aws-xray-daemon'
          PortMappings:
            - ContainerPort: 2000
              Protocol: "udp"
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'ServiceName'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref 'ServiceName'

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'NetworkStackName', 'ClusterName' ] ]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'DesiredCount'
      LoadBalancers:
        - LoadBalancerName: !Ref LoadBalancerName
          ContainerName: !Ref ServiceName
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [ ':', [ !Ref 'NetworkStackName', 'ECSSecurityGroup' ] ]
          Subnets:
            - Fn::ImportValue:
                !Join [ ':', [ !Ref 'NetworkStackName', 'PublicSubnet' ] ]
      TaskDefinition: !Ref 'TaskDefinition'